---
- name: client | generate ssh key for this machine
  user:
    name: "{{ borgbackup_client_user }}"
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: "{{ borgbackup_ssh_key }}"
    ssh_key_type: rsa

- name: client | fetch ssh-key
  shell: "cat {{ borgbackup_ssh_key }}.pub"
  register: sshkey
  changed_when: False

- name: client | write passphrase
  lineinfile:
    dest: "~{{ borgbackup_client_user }}/.borg.passphrase"
    state: "present"
    line: 'export BORG_PASSPHRASE="{{ borgbackup_passphrase }}"'
    create: "yes"

- name: client | disable strict key checking for backup servers
  blockinfile:
    dest: "~{{ borgbackup_client_user }}/.ssh/config"
    create: yes
    marker: "### {mark} ANSIBLE MANAGED BLOCK {{ item.fqdn }} ###"
    content: |
      Host {{ item.fqdn }}
        StrictHostKeyChecking no
        IdentityFile {{ borgbackup_ssh_key }}
        ServerAliveInterval 10
        ServerAliveCountMax 30
        Port {{ item.port | default("22") }}
  with_items: "{{ borgbackup_servers }}"
  tags: config

- name: client | put sshpubkey on the normal backupserver
  authorized_key:
    user: "{{ item.user }}"
    key: "{{ sshkey.stdout }}"
    key_options: 'command="cd {{ item.home }}/{{ item.pool }};borg serve {% if borgbackup_appendonly %}--append-only {% endif %}--restrict-to-path {{ item.home }}/{{ item.pool }}",no-port-forwarding,no-X11-forwarding,no-pty,no-agent-forwarding,no-user-rc'
  delegate_to: "{{ item.shortname }}"
  when: item.type == 'ssh'
  with_items: "{{ borgbackup_servers }}"

# rsync.net and hetzner have no python, so we can only use raw to manage ssh keys - workaround with local tmp file
- name: client | get authorized_keys file
  raw: scp {{ item.user }}@{{ item.fqdn }}:.ssh/authorized_keys /tmp/authkeys-{{ item.type }}-{{ item.fqdn }}-authkeys
  delegate_to: localhost
  become: no
  when: item.type in ['rsync.net','hetzner']
  with_items: "{{ borgbackup_servers }}"
  changed_when: false

- name: client | put backup script
  template:
    src: "borg-backup.sh.j2"
    dest: "/usr/local/bin/borg-backup"
    owner: "{{ borgbackup_owner }}"
    group: "{{ borgbackup_group }}"
    mode: "0550"
  tags:
    - script
    - borg-script

- name: client | create backup-directory if appendonly is set
  file:
    path: "{{ item.home }}/{{ item.pool }}"
    state: directory
    owner: "{{ item.user }}"
    group: "{{ item.user }}"
  when: borgbackup_appendonly == True
  delegate_to: "{{ item.shortname }}"
  with_items: "{{ borgbackup_servers }}"

- name: client | check if we already have keys for client
  stat: 
    path: "~{{ borgbackup_client_user }}/.config/borg/keys"
  register: havekeys
  loop: "{{ borgbackup_servers }}"

- name: client | init the repo
  shell: /usr/local/bin/borg-backup init
  become_user: "{{ borgbackup_client_user }}"
  register: backup_init
  changed_when: "'Remember your passphrase' in backup_init.stderr"
  when: item.stat.exists == False
  with_items: "{{ havekeys.results }}"

- name: client | Wait until the repo is initiated
  wait_for:
    path: "{{ item.home }}/{{ item.pool }}/README"
  delegate_to: "{{ item.shortname }}"
  with_items: "{{ borgbackup_servers }}"
  
#- name: client | copy borg keys to ansible host
#  fetch:
#    src: "~{{ borgbackup_client_user }}/.config/borg/keys/{{ item.fqdn | replace('.', '_') }}_{{ item.home | regex_replace('\\/$', '') | replace('/', '_') }}_{{ item.pool }}_{{ inventory_hostname | replace('-', '_') }}"
#    dest: /tmp/ansible/borgkeys/
#    flat: yes
#  with_items: "{{ borgbackup_servers }}"
#  tags:
#    - copykeys
#
#- name: client | copy borg keys to management server
#  copy:
#    src: /tmp/ansible/borgkeys/
#    dest: "~{{ borgbackup_management_user }}/.config/borg/keys/"
#    owner: "{{ borgbackup_management_user }}"
#    mode: 0600
#    backup: yes
#  delegate_to: "{{ item.shortname }}"
#  when: item.type == 'normal'
#  with_items: "{{ borgbackup_servers }}"
#  tags:
#    - copykeys
#
#- name: client | delete local copy of keys
#  become: no
#  file:
#    path: /tmp/ansible/borgkeys
#    state: absent
#  delegate_to: localhost

- name: client | check if we have cronjob
  stat:
    path: /etc/cron.d/borg-backup
  register: borg_cron
  tags: cron

# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/cron_module.html
- name: client | create backup cronjob
  cron:
    cron_file: "borg-backup"
    user: "{{ borgbackup_client_user }}"
    name: "borg-backup"
    minute: "{{ borgbackup_cron_minute }}"
    hour: "{{ borgbackup_cron_hour }}"
    day: "{{ borgbackup_cron_day }}"
    job: "/bin/nice /usr/local/bin/borg-backup backup >> /var/log/borg.log 2>&1 &"
  when: not borg_cron.stat.exists
  tags:
    - cron

