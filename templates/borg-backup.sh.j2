#!{{ borgbackup_shell }}

{{Â ansible_managed | comment }} 

if [ -z "$1" ] || [ ! -z "$2" ]
  then
    printf "Possible: info | init | list | backup | mount \n\n"
fi

# Sourcing the backup-passphrase

. ~{{ borgbackup_client_user }}/.borg.passphrase

# override location since we specify port now
export BORG_RELOCATED_REPO_ACCESS_IS_OK=yes
export BORG_UNKNOWN_UNENCRYPTED_REPO_ACCESS_IS_OK=yes

# Small helper commands, like listing backups, will help us in the future :)

if [ "$1" = "info" ]
  then
    if [ -z "$2" ]; then printf "run $0 with list and use the backup-tag to request information\n"; exit 1; fi
{% for b in borgbackup_servers %}
    export BORG_REPO="ssh://{{ b.user }}@{{ b.fqdn }}:{{ b.port | default('22') }}{{ b.home }}/{{ b.pool }}"
    /usr/local/bin/borg info {{ b.options }} $BORG_REPO::$2
{% endfor %}
    exit 0
fi

if [ "$1" = "mount" ]
  then
    if [ -z "$2" ]; then printf "Select the backup-server\n"; exit 1; fi
    if [ -z "$3" ]; then printf "Select the backup to mount\n"; exit 1; fi
    if [ -z "$4" ]; then printf "Select the path to mount the backup on\n"; exit 1; fi
{% for b in borgbackup_servers %}
    export BORG_REPO="ssh://{{ b.user }}@{{ b.fqdn }}:{{ b.port | default('22') }}{{ b.home }}/{{ b.pool }}"
    /usr/local/bin/borg mount {{ b.options }} $BORG_REPO::$3 $4
    if [ "$?" = "0" ]; then printf "Backup mounted on $4, do not forget to unmount!\n"; fi
    exit 0
{% endfor %}
fi

if [ "$1" = "list" ]
  then
{% for b in borgbackup_servers %}
    export BORG_REPO="ssh://{{ b.user }}@{{ b.fqdn }}:{{ b.port | default('22') }}{{ b.home }}/{{ b.pool }}"
    printf "Archives on {{ b.fqdn }} :\n"
    /usr/local/bin/borg list {{ b.options }} 
{% endfor %}
    exit 0
fi

if [ "$1" = "init" ]
  then
{% for b in borgbackup_servers %}
    export BORG_REPO="ssh://{{ b.user }}@{{ b.fqdn }}:{{ b.port | default('22') }}{{ b.home }}/{{ b.pool }}"
    /usr/local/bin/borg init --encryption={{ borgbackup_encryption_mode }} {{ b.options }}
{% endfor %}
    exit 0
fi

if [ "$1" = "backup" ]
  then
    date=`date +%Y%m%d-%H%M`
    logsize=$(stat -c%s /var/log/borg-backup.log)
    if [ "$logsize" -gt 1000000 ]; then
        echo "$date: Truncating backup log..." > /var/log/borg-backup.log
    fi

    echo "===== Running backup at $date =====" >> /var/log/borg-backup.log

    # Running some commands pre-backup
{% for precommand in borgbackup_pre_commands %}
    {{ precommand }}
{% endfor %}

# Create array for exit codes
BORGEXIT=()
{% for b in borgbackup_servers %}
    {% for dir in borgbackup_include %}
        printf "Backing up {{ dir }} to {{ b.fqdn }}: repo - {{ b.pool }}::{{dir | regex_replace('\/', '_')}}-$date\n"

        export BORG_REPO="{% if b.type == 'ssh' %}ssh://{% endif %}{{ b.user }}@{{ b.fqdn }}:{% if b.type == 'ssh' %}{{ b.port | default('22') }}{% endif %}{{ b.home }}/{{ b.pool }}"
        /usr/local/bin/borg create --compression {{ borgbackup_compression }} --stats {{ b.options }} $BORG_REPO::{{dir | regex_replace('\/', '_')}}-$date {{ dir }} {% if automysql.stat.isdir is defined and automysql.stat.isdir == True %}/var/lib/automysqlbackup{% endif %} {% for dir in borgbackup_exclude %} --exclude '{{ dir }}'{% endfor %} --exclude-if-present .borg_exclude
        BORGEXIT+=($?)
    {% endfor %}

{% if mysqluser is defined %}
    echo "Doing mysql backup to {{ b.fqdn }}: repo - {{ b.pool }}::mysqldump-$date"
    # --complete-insert --> add column names in inserts
    mysqldump {{borgbackup_mysql_flags}} \
    {% if mysqlpass != '' %}--password='{{mysqlpass}}' {% endif %} \
    {% if mysqluser != '' %}--user='{{mysqluser}}' {% endif %} \
    {% for skip_table in mysqlskip %}
        --ignore-table='{{skip_table}}' \
    {% endfor -%} | /usr/local/bin/borg create --compression {{ borgbackup_compression }} --stats {{ b.options }} $BORG_REPO::mysqldump-$date -
    BORGEXIT+=(${PIPESTATUS[0]} ${PIPESTATUS[1]})

{% endif %}
{% if borgbackup_do_postgresql is defined %}
    sudo -u postgres sh -c "cd /tmp; pg_dumpall" | /usr/local/bin/borg create --compression {{ borgbackup_compression }} --stats {{ b.options }} $BORG_REPO::postgresql-$date -

{% endif %}
{% if borgbackup_do_plex is defined %}

    sqlite3 "/var/lib/plexmediaserver/Library/Application Support/Plex Media Server/Plug-in Support/Databases/com.plexapp.plugins.library.db" .dump  | /usr/local/bin/borg create --compression {{ borgbackup_compression }} --stats {{ b.options }} $BORG_REPO::plex-dump-$date - 
    BORGEXIT+=($?)
{% endif %}

    # iterate over exit codes
    EXITCODE=''
    for i in ${BORGEXIT[@]}; do
        ((EXITCODE+=$i))
    done

    if [ $EXITCODE -eq 0 ]; then 
        printf "Backup succeeded on $date to {{ b.fqdn }}\n" >> /var/log/borg-backup.log
{% if not borgbackup_appendonly %}
    # prune old backups if we exited correctly
    {% for dir in borgbackup_include %}
        echo "Pruning old {{dir}} backups"
        export BORG_REPO="ssh://{{ b.user }}@{{ b.fqdn }}:{{ b.port | default('22') }}{{ b.home }}/{{ b.pool }}"
        /usr/local/bin/borg prune --prefix "{{dir | regex_replace('\/', '_')}}-" {{ b.options }} $BORG_REPO -H {{ borgbackup_retention.hourly }} -d {{ borgbackup_retention.daily }} -w {{ borgbackup_retention.weekly }} -m {{ borgbackup_retention.monthly }} -y {{ borgbackup_retention.yearly }}
    {% endfor %}
    {% if mysqluser is defined %}
        echo "Pruning old mysqldump backups"
        export BORG_REPO="ssh://{{ b.user }}@{{ b.fqdn }}:{{ b.port | default('22') }}{{ b.home }}/{{ b.pool }}"
        /usr/local/bin/borg prune --prefix "mysqldump-" {{ b.options }} $BORG_REPO -H {{ borgbackup_retention.hourly }} -d {{ borgbackup_retention.daily }} -w {{ borgbackup_retention.weekly }} -m {{ borgbackup_retention.monthly }} -y {{ borgbackup_retention.yearly }}
    {% endif %}
{% endif %}
    else
        printf "Backup FAILED on $date to {{ b.fqdn }}\n" >> /var/log/borg-backup.log
    fi

{% endfor %}

{% for postcommand in borgbackup_post_commands %}
    # Running some commands post-backup
    if [ $EXITCODE -eq 0 ]; then 
        {{ postcommand }}
    fi 
{% endfor %}

fi

